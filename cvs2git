#!/usr/bin/perl

use warnings;
use strict;
use constant { true => 1, false => 0 };
use IPC::System::Simple qw(system systemx capture capturex);
use Cwd qw(abs_path);

@ENV{TZ} = "Europe/London";

BEGIN {
  my $here;
  $here = abs_path($0);
  $here =~ s:/[^/]*$::;
  require "$here/Rcs-Parser/lib/Rcs/Parser.pm";
}

use Getopt::Long;
use Sort::Versions;
use Data::Dumper;
use Time::Local;
use File::Temp;
use Clone 'clone';
$Data::Dumper::Purity = 1;

my $cvsroot;
my $gitdirs;
my $unified = false;
my $product_names = "BCM2835Pico,BCM2835Dev,BCM2835,BonusBinDev,BuildHost,BuildHostDev,Disc,DiscDev,IOMDHAL,IOMDHALDev,OMAP3,OMAP3Dev,OMAP3Live,PlingSystem,S3CDev,Titanium,TitaniumDev,Tungsten,TungstenDev";
my $single = "castle/RiscOS/Export";
GetOptions("unified!" => \$unified, "cvsroot=s" => \$cvsroot, "git=s" => \$gitdirs, "products=s" => \$product_names, "single=s" => \$single) or die;
$cvsroot = abs_path($cvsroot);
$gitdirs = abs_path($gitdirs);

my %modules;


sub load_rcs {
  my ($rcsfile, $leaf) = @_;

  print "Loading RCS file  $rcsfile, leaf $leaf.\n";

  $leaf =~ s/!//g;

  my $rcs = new Rcs::Parser;
  $rcs->load($rcsfile);

  #print Dumper(\$rcs);


  my %commits;
  my $tag2commit = {};
  my %branches;

  foreach my $i (keys %{$rcs->{rcs}}) {
    next unless $i =~ m/^((?:[0-9]+\.)*)([0-9]+)\.([0-9]+)$/;
    my $c = $rcs->{rcs}->{$i};
    #print Dumper($c);
    $c->{revision} = $i;
    my ($year, $month, $day, $hour, $minute, $second) = split(/\./, $c->{date});
    $year += 1900 if $year < 100;
    $c->{time} = timegm($second, $minute, $hour, $day, $month - 1, $year);
    $c->{branch_pos} = $3;
    $c->{parents} = [];
    $c->{log} = "Log Message Missing" unless defined ($c->{log});
    $c->{module} = $rcs;
    chomp $c->{log};
    chomp $c->{author};
    $commits{$i} = $c;
    unless(defined($branches{$1 . "0." .$2}) && $branches{$1 . "0." .$2}->{branch_pos} > $c->{branch_pos}) {
      $branches{$1 . "0." .$2} = $c;
    }
    # Remove "Summary:" prefix from log messages.
    $c->{log} =~ s/^\s*(?:Summary *:*\s*)?(\S.*\S)\s*(Detail|Admin) *:*/$1\n\n$2:/is;
  }

  foreach (keys %commits) {
    my ($a, $b) = m/^(.*\.)(\d*)$/;
    $b -= 1;
    push @{$commits{$_}->{parents}}, $commits{$a.$b} if defined($commits{$a.$b});
  }

  foreach my $i (values %commits) {
    push @{$commits{$i->{branches}}->{parents}}, $i if defined($i->{branches});
  }

  # Fix order of initial commits from imports
  {
    my $a = $rcs->{rcs}->{"1.1.1.1"};
    my $b = $rcs->{rcs}->{"1.1"};
    my $c = $rcs->{rcs}->{"1.2"};
    if (defined($a) && defined($b) && $a->{date} eq $b->{date}) {
      $a->{parents} = [];
      $b->{parents} = [$a];
      $c->{parents} = [$a] if defined($c);
    }
  }

  foreach (split(/\s+/, $rcs->{rcs}->{header}->{symbols})) {
    my ($tag, $rev) = split /:/;

    if ($rev =~ m/^(?:[0-9]+\.)+0\.([0-9]+)$/) {
      if (defined $branches{$rev}) {
        $tag2commit->{$tag}->{branch} = true;
        $tag2commit->{$tag}->{commit} = $branches{$rev};
      }
    } elsif (defined $commits{$rev}) {
      my $commit = $commits{$rev};
      my $is_primary = index($tag, $leaf . "-") == 0 || !defined($commit->{tag});
      $tag2commit->{$tag}->{branch} = false;
      $tag2commit->{$tag}->{commit} = $commit;
      $commit->{tag} = $tag if $is_primary;
      push @{$commit->{tags}}, $tag;
    }
  }

  $tag2commit->{"master"}->{branch} = true;
  $tag2commit->{"master"}->{commit} = $commits{$rcs->{rcs}->{header}->{head}};

  my $merge = sub {
    # Add parents for CVS merges
    my ($c, $p) = @_;
    return unless defined($tag2commit->{$c});
    return unless defined($tag2commit->{$p});
    push @{$tag2commit->{$c}->{commit}->{parents}}, $tag2commit->{$p}->{commit};
  };

  # All CVS merges need to listed here.

  &$merge("Kernel-5_35-4_79_2_44", "Kernel-5_35-4_79_2_25_2_2");
  &$merge("Kernel-5_35-4_79_2_123", "Kernel-5_35-4_79_2_98_2_54");
  &$merge("Kernel-5_35-4_79_2_147_2_1", "Kernel-5_35-4_79_2_98_2_52_2_1");
  &$merge("Kernel-5_35-4_79_2_147_2_23", "Kernel-5_35-4_79_2_164");
  &$merge("Kernel-5_35-4_79_2_165", "Kernel-5_35-4_79_2_147_2_23");
  &$merge("Kernel-5_48", "Kernel-5_35-4_79_2_327");

  &$merge("BuildSys-6_00-1_142_2_2", "BuildSys-6_11");
  &$merge("BuildSys-6_00-1_142_2_3", "BuildSys-6_19");
  &$merge("BuildSys-6_00-1_142_2_4", "BuildSys-6_34");
  &$merge("BuildSys-6_00-1_142_2_5", "BuildSys-6_52");
  &$merge("BuildSys-6_00-1_142_2_6", "BuildSys-6_64");
  &$merge("BuildSys-6_00-1_142_2_9", "BuildSys-7_04");

  &$merge("HdrSrc-0_63", "HdrSrc-0_57-4_58_2_9");
  &$merge("HdrSrc-1_62-4_162_2_3", "HdrSrc-1_65");
  &$merge("HdrSrc-1_62-4_162_2_4", "HdrSrc-1_67");
  &$merge("HdrSrc-1_62-4_162_2_7", "HdrSrc-1_68");
  &$merge("HdrSrc-1_62-4_162_2_14", "HdrSrc-1_74");
  &$merge("HdrSrc-1_62-4_162_2_15", "HdrSrc-1_75");
  &$merge("HdrSrc-1_76", "HdrSrc-1_62-4_162_2_15");

  &$merge("FileCore-3_26", "FileCore-3_22-4_6_2_1");
  &$merge("FileCore-3_28", "FileCore-3_25-4_9_2_2");
  &$merge("DMA-0_16", "DMA-0_15-4_4_2_6");
  &$merge("DualSerial-0_25", "DualSerial-kbracey_32bit_merge");
  &$merge("Parallel-0_64", "Parallel-kbracey_32bit_merge");
  &$merge("RISC_OSLib-5_06", "RISC_OSLib-4_97-4_12_2_8");
  &$merge("RISC_OSLib-5_34", "RISC_OSLib-5_33-4_50_2_1");
  &$merge("PDModules-4_45", "PDModules-4_44-4_1_2_7");
  &$merge("PDriver-3_34", "PDriver-3_33-4_7_2_1");
  &$merge("sbrodie_TextGadgets_merged_19Jun98", "sbrodie_Spin_merge_18Jun98");
  &$merge("Manager-3_42", "Manager-3_41-4_2_2_13");
  &$merge("SharedSnd-1_06", "SharedSnd-ESP_SharedSnd-1_06_merge");
  &$merge("FPASC-sbrodie_sedwards_16Mar2000", "FPASC-kbracey_32bit_merge");
  &$merge("callx-0_03", "callx-0_02-1_1_2_3");
  &$merge("MemLib-1_01", "MemLib-1_00-1_1_2_3");
  &$merge("remotedb-0_02", "remotedb-0_01-1_1_2_5");
  &$merge("LanManFS-2_00", "LanManFS-1_87-1_1_1_1_2_13");
  &$merge("KeyWatch-0_09", "KeyWatch-0_08-1_1_2_10");
  &$merge("srcbuild-0_25", "srcbuild-0_24-1_23_2_4");
  &$merge("FPASC-4_11", "FPASC-4_10-4_3_2_1");

  $rcs->{tag2commit} = $tag2commit;

  return $rcs;
}


sub load_and_init_module {
  my ($src) = @_;
  return $modules{$src} if defined($modules{$src});
  
  my $modname = $src;
  $modname =~ tr%/%_%;
  $modname =~ s/!//g;
  die "Bad modname! - #$src#" unless defined $modname;
      
  my ($leaf) = $src =~m%^(?:.*/)?([^/]*)$%;

  my $file = "$cvsroot/$src/VersionNum,v";
  $file = "$cvsroot/$src/Source/VersionNum,v" unless -f $file;
  $file = "$cvsroot/$src/ShareFS/aof/ShareFS,ffd,v" unless -f $file;
  $file = "$cvsroot/$src/!RunImage,ff8,v" unless -f $file;
  $file = "$cvsroot/$src/Perl,ff8,v" unless -f $file;
  $file = "$cvsroot/$src/!Run,feb,v" unless -f $file;

  die "Can't find log file for module $src" unless -f $file;

  my $module = load_rcs($file, $leaf);
  $module->{src} = $src;
  $module->{modname} = $modname;
  $module->{leaf} = $leaf;
  $module->{dir_set} = false;

  $modules{$src} = $module;
  return $module;
}

sub set_module_dir {
  my ($module) = @_;
  my $gitdir = $gitdirs . "/" . ($unified ? "unified" : $module->{modname});
  delete $ENV{GIT_DIR};
  delete $ENV{GIT_WORK_TREE};
  if ($module->{dir_set}) {
    chdir $gitdir;
  } else {
    systemx "git", "init", $gitdir unless -d "$gitdir/.git";
    chdir $gitdir;
    my $hash = capturex("git", "commit-tree", "4b825dc642cb6eb9a060e54bf8d69288fbee4904", "-m", "Dummy Commit");
    chomp $hash;
    systemx "git", "checkout", $hash;
    $module->{dir_set} = true;
  }
  $ENV{GIT_DIR} = "$gitdir/.git";
  return $gitdir;
}

sub convert_commit {
  my ($commit) = @_;

  unless (defined $commit->{module}) {
    print Dumper(\$commit);
    die "Undefined commit";
  }
  # Exit if already converted.
  return $commit->{hash} if defined $commit->{hash};

  # Create parent arguments
  my @parents;
  foreach my $p (@{$commit->{parents}}) {
    push @parents, "-p";
    push @parents, convert_commit($p);
   }

  my $src =  $commit->{module}->{src};
  die unless defined $src;

  my $tag_ns = "refs/tags/";
  if ($unified) {
    $tag_ns = $tag_ns . $commit->{module}->{modname} . "-";
  } else {
    set_module_dir $commit->{module};
  }

  my $tree;
  if (defined($commit->{tag})) {
 
    eval {
      $tree = capturex("git", "rev-parse", $tag_ns . $commit->{tag} . "^{tree}");
    };
    if ($@) {
      $commit->{module}->{writen} = true;
      my $tmp = File::Temp->newdir();
      chdir $tmp->dirname;
      systemx "cvs", "-R", "-d", $cvsroot, "export", "-N", "-d", ".", "-n", "-r", $commit->{tag}, $src;
      chdir "/";
      $ENV{GIT_WORK_TREE} = $tmp->dirname . "/" . $src;
      systemx "git", "add", "-Af";
      $tree = capturex("git", "write-tree");
      delete $ENV{GIT_WORK_TREE};
    }
  } elsif (scalar(@{$commit->{parents}})) {
    $tree = $commit->{parents}[0]->{tree};
  } else {
    $tree = "4b825dc642cb6eb9a060e54bf8d69288fbee4904";
  }

  chomp $tree;
  $commit->{tree} = $tree;
  $commit->{author} = "Unknown" unless defined $commit->{author};

  $ENV{GIT_COMMITTER_NAME} = $commit->{author};
  $ENV{GIT_AUTHOR_NAME} = $commit->{author};
  $ENV{GIT_COMMITTER_EMAIL} = "X";
  $ENV{GIT_AUTHOR_EMAIL} = "X";
  $ENV{GIT_COMMITTER_DATE} = $commit->{time};
  $ENV{GIT_AUTHOR_DATE} = $commit->{time};


  my $hash = capturex("git", "commit-tree", $tree, @parents, "-m", $commit->{log} // "Empty Log");
  chomp $hash;

  foreach my $tag (@{$commit->{tags}}) {
    systemx "git", "update-ref", $tag_ns.$tag, $hash;
  }

  print (($commit->{tag} // "Untagged") . " : $hash\n");

  $commit->{hash} = $hash;

  return $hash;
}

sub data {
  # Generate Git-fastimport data command.
  my ($d) = @_;
  return "data " . length($d) . "\n" . $d . "\n";
}

my $current;
my $next;

sub find_commit {
  my ($tag) = @_;
  #print "Find:", Dumper($t);
  my $commit = $tag->{commit};
  if($tag->{branch}) {
    while(defined($commit) && $commit->{time} > $current->{time}) {
      unless(defined($next) && $next->{time} < $commit->{time}) {
        $next = $commit;
      }
      $commit = $commit->{parents}->[0];
    }
  }
  return $commit;
}



# Load a module now to assist in debugging and initialise repository in unified mode..
set_module_dir(load_and_init_module($single));

chdir $gitdirs;
open FI, "| xz > fast-import_data.xz"; #"|tee data|git fast-import";
print FI "reset master\n";

sub process_super_commit {
  my ($rcs, $add_module_commit, $prefix) = @_;
  my $product = $rcs->{leaf};

  # Load the products file.
  $rcs->{current_document} = clone($rcs->{orig_document});
  my $commit = find_commit($rcs->{tag2commit}->{"master"});
  return unless defined $commit;
  my $mods = $rcs->get($commit->{revision});


  # Include the Products file with every commit
  print FI "M 100644 inline ${prefix}Products/$product/modules\n", data($mods);

  # For each line in product file.
  foreach (split("\n", $mods)) {
    next if m/^\s*(#.*)?$/;

    # Split into path and tag.
    my ($src, $tag) = m/^\s*([^\s]+)\s+([^\s]+)\s*$/;

    unless (defined $src) {
      print "$mods\n\n#$_#\n";
      die "Bad source!";
    }

    $src =~ tr:.:/:; # Sometimes RISC OS paths are used.

    next if $src eq "bsd/RiscOS/Sources/Utilties/SDCreate";     # Spelling mistake
    next if $src eq "castle/RiscOS/Sources/Video/UserI/BootFX"; # Mistake
    next if $src eq "castle/RiscOS/Utilities/Release/builder";  # CVS corrupt
    next if $src eq "castle/RiscOS/Utilities/Release/crc32";    # Missing VersionNum file
    next if $src eq "closed/RiscOS/Sources/SystemRes/LiveDisc"; # Not public

    if ($src eq "castle/RiscOS/Apps/Makefile") {
      # Include this file here.
      print FI "M 100644 inline ${prefix}castle/RiscOS/Apps/Makefile\n", data(<< 'END');
# Makefile for the Build System Binary Build Environment
#
# $Id: Makefile,v 1.2 2000/12/13 11:40:50 nbingham Exp $
#

BBETYPE = apps
bbe-apps: bbe-generic-resources-get-alias
  BBE_Export_Dir !Builder
  BBE_Export_Dir !Perl
  BBE_Export_Dir !WinEdit

END
      next;
    }

    # Convert tag to git convention.
    $tag = "master" if $tag eq "HEAD" || $tag eq "TRUNK";

    # Convert CVS module to git if needed.
    my $module = load_and_init_module($src);

    my $c = find_commit($modules{$src}->{tag2commit}->{$tag});
    &$add_module_commit($c, $tag) if defined $c;
  }

}

sub write_commit_header {
  my ($product) = @_;
  print FI "commit refs/heads/$product\ncommitter " . $current->{author} . " <test> " . $current->{time} . " +0000\n", data($current->{module}->{leaf} . ": " . $current->{log}),
    "deleteall\n";
}

my @products;

# Load Products file
foreach my $product (split(/,/,$product_names)) {
  print FI "reset refs/heads/${product}-submodules\n";
  print FI "reset refs/heads/${product}-unified\n";
  my $rcs = load_rcs("$cvsroot/Products/$product/modules,v", "none");
  $rcs->{orig_document} = $rcs->{current_document};
  $rcs->{leaf} = $product;
  push @products, $rcs;
}

foreach my $rcs (@products) {
  # Find first (earliest time) commit of the product file.
  $current = $rcs->{tag2commit}->{"master"}->{commit};
  while(scalar(@{$current->{parents}})) {
    $current = $current->{parents}->[0];
  }


  while(defined $current) {

    $next = undef;

    write_commit_header($rcs->{leaf} . "-submodules");
    my $gitmodules = "";
    my $add_submodule = sub {
      my ($c) = @_;
      my $modname = $c->{module}->{modname};
      my $src = $c->{module}->{src};
      my $url = $unified ? "." : "../$modname";
      print FI "M 160000 ", convert_commit($c), " $src\n";
      #print "$src $tag - ", $c->{tag}, " ", Dumper(\$c->{tag}, \$c->{tags}), "\n";
      $gitmodules = $gitmodules . "[submodule \"$modname\"]\n\tpath = $src\n\turl = $url\n\n";
      my $link = $src;
      if ($link =~ s/^(bsd|castle|cddl|gpl|mixed)/merged/) {
        print FI "M 120000 inline $link\n", data("../" x ($src =~ tr:/::) . $src);
      }
    };
    process_super_commit($rcs, $add_submodule, "");
    print FI "M 100644 inline .gitmodules\n", data($gitmodules);

    if ($unified) {
      write_commit_header($rcs->{leaf} . "-unified");
      my $add_tree = sub {
        my ($c) = @_;
        my $src = $c->{module}->{src};
        convert_commit($c);
        print FI "M 040000 ", $c->{tree}, " $src\n";
        my $link = $src;
        if ($link =~ s/^(bsd|castle|cddl|gpl|mixed)/merged/) {
          print FI "M 120000 inline $link\n", data("../" x ($src =~ tr:/::) . $src);
        }
      };
      process_super_commit($rcs, $add_tree, "");
    }

    $current = $next;
  }
}

$current = undef;

if ($unified) {

  foreach my $rcs (@products) {
    # Find first (earliest time) commit of any product file.
    my $p = $rcs->{tag2commit}->{"master"}->{commit};
    while(scalar(@{$p->{parents}})) {
      $p = $p->{parents}->[0];
    }
    $current = $p if !defined($current) || $p->{time} < $current->{time};
  }

  while(defined $current) {
    $next = undef;
    write_commit_header("master");
    foreach my $rcs (@products) {
      my $prefix = $rcs->{leaf} . "/";
      my $add_tree = sub {
        my ($c, $branch) = @_;
        my $src = $c->{module}->{src};
        convert_commit($c);
        my $link = $prefix . $src;
        if ($branch eq "master") {
          $branch = "";
        } elsif (index($branch,  $c->{module}->{leaf} . "-")  == 0) {
          $branch = substr($branch, length($c->{module}->{leaf}));
        } else {
          $branch = "-$branch";
        }
        $src = "Source/$src$branch";
        print FI "M 040000 ", $c->{tree}, " $src\n";
        $src = "../" x ($link =~ tr:/::) . $src;
        print FI "M 120000 inline $link\n", data($src);
        if ($link =~ s:^([^/]*/)(bsd|castle|cddl|gpl|mixed):$1merged:) {
          print FI "M 120000 inline $link\n", data($src);
        }
      };
      process_super_commit($rcs, $add_tree, $prefix);

    }
    $current = $next;
  }
}
close FI;

# Add remaining module branches
foreach my $module (values %modules) {

  my $src = $module->{src};
  print "\n\n\n$src\n";

  set_module_dir $module;
  foreach my $i (keys %{$module->{tag2commit}}) {
     if ($module->{tag2commit}->{$i}->{branch}) {
      print "Adding branch: $i\n";
      my $c = convert_commit($module->{tag2commit}->{$i}->{commit});
      print "Branch $i: $c\n";
      systemx "git", "branch", "-f", $unified ? ($module->{modname} . "-" . $i) : $i, $c;
    }
  }
  unless ($unified) {
    systemx "git", "reset";
    systemx "git", "gc", "--auto";
  }
}

print "\n\nCreating main repository...\n";
delete $ENV{GIT_DIR};
delete $ENV{GIT_WORK_TREE};
systemx "git", "init", "$gitdirs/unified" unless -d "$gitdirs/unified/.git";
chdir "$gitdirs/unified";
systemx "git", "reset";
system "unxz < ../fast-import_data.xz | git fast-import --force";
systemx "git", "gc";

